//ES6
import React from 'react'
const $ = require('jquery')

let Remarkable = require('remarkable')
let RemarkableReactRenderer = require('remarkable-react')

class CommentList extends React.Component {
	render() {
		let commentNodes = this.props.data.map(function(comment) {
			return (
				<Comment author={comment.author} key={comment.id}>
				{
					comment.text
				}
			        </Comment>
			);
		});
		return (
				<div className="commentList">
	        {commentNodes}
	      </div>
		);
	}
}

class CommentForm extends React.Component {
	constructor() {
		super()
		this.state = {
			author: '',
			text: '',
			authorEmpty: true,
			textEmpty: true
		}
	}
	handleAuthorChange(e) {
		this.setState({
			author: e.target.value,
			authorEmpty: e.target.value == "" ? true : false
		});
	}
	handleTextChange(e) {
		this.setState({
			text: e.target.value,
			textEmpty: e.target.value == "" ? true : false
		});
	}
	handleSubmit(e) {
		e.preventDefault(); //prevent
		let author = this.state.author.trim(); //remove the spaces
		let text = this.state.text.trim();
		let dateNow = new Date();
		let dateYMD = new Array(0)
		dateYMD.push(dateNow.getFullYear(), dateNow.getMonth() + 1, dateNow.getDate());
		let weekday = new Array(7)
		weekday[0] = "Sunday"
		weekday[1] = "Monday"
		weekday[2] = "Tuesday"
		weekday[3] = "Wednesday"
		weekday[4] = "Thursday"
		weekday[5] = "Friday"
		let time = dateYMD.join('-') + " " + dateNow.toLocaleTimeString() + " " + weekday[dateNow.getDay()];
		if (!text || !author) {
			return;
		}
		// TODO: send request to the server
		this.props.onCommentSubmit({
			author: author,
			text: text,
			time: time
		});
		this.setState({
			author: '',
			text: '',
			time: '',
			authorEmpty: true,
			textEmpty: true
		});
	}
	render() {
		return (
			<form className="commentForm" onSubmit={this.handleSubmit.bind(this)}>
	        <input
	          type="text"
	          placeholder="Your name"
	          value={this.state.author}
	          onChange={this.handleAuthorChange.bind(this)}
	          className = "yourName"
	        />
	        <textarea
	          type="text"
	          placeholder="Say something..."
	          value={this.state.text}
	          onChange={this.handleTextChange.bind(this)}
	          className="commentContent"
	        />
	        <input type="submit" value="submit" className={!this.state.authorEmpty && !this.state.textEmpty ? "submitButton" : "submitButton hide"} />
	      </form>
		);
	}
}

class CommentBox extends React.Component {
	constructor() {
		super()
		this.state = {
			data: []
		}
	}
  loadCommentsFromServer() {
  	debugger
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'GET',
      cache: false,
      success: function(data) {
        this.setState({
          data: data
        })
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    })
  }
  handleCommentSubmit(comment) {
    let comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    let newComments = comments.concat(comment);
    this.setState({
      data: newComments
    });
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({
          data: data
        });
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({
          data: comments
        });
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  }
  componentDidMount() {
    this.loadCommentsFromServer()
  }
  render() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit.bind(this)} />
      </div>
    )
  }
}

class Comment extends React.Component {
	rawMarkup() {
		let md = new Remarkable();
		let rawMarkup = md.render(this.props.children.toString());
		return {
			__html: rawMarkup
		};
	}

	render() {
		return (
			<div className="comment">
	        <h2 className="commentAuthor">
	          {this.props.author}
	        </h2>
	        <span dangerouslySetInnerHTML={this.rawMarkup()} />
	        <p className="commentTime">{this.props.time}</p>
	      </div>
		);
	}
}

class CommentContainer extends React.Component {
	render() {
		return (
			<div className = "comment-container">
				<CommentBox url = "/json/comments.json"/>
			</div>
		)
	}
}

export default CommentContainer;